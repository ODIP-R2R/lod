@prefix dc:      <http://purl.org/dc/elements/1.1/> .
@prefix dct:	 <http://purl.org/dc/terms/> .
@prefix owl:     <http://www.w3.org/2002/07/owl#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xsd:     <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix foaf:    <http://xmlns.com/foaf/0.1/> .
@prefix skos:    <http://www.w3.org/2004/02/skos/core#> .
@prefix dbpedia: <http://dbpedia.org/ontology#> .

# Linked Data API prefixes

@prefix api:     <http://purl.org/linked-data/api/vocab#> .
@prefix extras: <http://www.epimorphics.com/vocabularies/lda#> .

# R2R prefixes

@prefix spec:	<http://r2r.tw.rpi.edu/spec/r2r#> .
@prefix r2r:	<http://data.rvdata.us/vocab/id/class/> .
@prefix olvessel: <http://schema.oceanlink.org/vessel#> .
@prefix olcruise: <http://schema.oceanlink.org/cruise#> .

spec:api
	a api:API;
	rdfs:label "R2R Vocabulary Service"@en;
	rdfs:comment "A prototype Vocabulary Service for R2R Project"@en;
	api:sparqlEndpoint <http://data.rvdata.us/sparql>;
	api:base "http://r2r.tw.rpi.edu/standalone/r2r";
	extras:enableETags true;
	api:defaultPageSize "40"^^xsd:integer;
	api:viewer
		api:describeViewer,
		api:labelledDescribeViewer;
	api:defaultViewer api:labelledDescribeViewer;
	api:defaultFormatter spec:htmlFormatter;
	api:endpoint
		spec:listClasses,
		spec:listVessels,
		spec:listVesselsByLabelContains,
		spec:listCruises,
		spec:listOrganizations,
		spec:listPeople,
		spec:listAwards,
		spec:listDevices,
		spec:listEvents,
		spec:listFilesets,
		spec:listFormats,
		spec:listHoldings,
		spec:listModels,
		spec:listParticipants,
		spec:listPorts,
		spec:listProducts,
		spec:listReports,
		spec:listRepositories;
	api:variable
		[api:name "webapp"; api:value "/standalone"],
		[api:name "_suppress_ipto"; api:value "yes"],
		[api:name "_strip_has"; api:value "yes"] ;
	.

# FORMATTERS

spec:htmlFormatter
	a api:XsltFormatter;
	api:name "html";
	api:mimeType "text/html; charset=utf-8";
	api:stylesheet "lda-assets/xslt/r2r.xsl";
	.

# VIEWERS

# ENDPOINTS

spec:listClasses	# not working
	a api:ListEndpoint;
	api:uriTemplate "/classes";
	api:exampleRequestPath "/classes";
	api:selector [
		api:where """[] rdf:type ?item.""";
		api:orderBy "?item";
	];
	.

spec:listVessels
	a api:ListEndpoint;
	api:uriTemplate "/vessels";
	api:exampleRequestPath "/vessels";
	api:selector [
		api:filter "type=vessel";
		api:sort "label";
	];
	.

spec:listVesselsByLabelContains
	a api:ListEndpoint;
	api:exampleRequestPath "/vessels?labelContains=Robert";
	api:uriTemplate "/vessels?labelContains={text}";
	api:selector [
			api:where
				""" ?item rdf:type olvessel:Vessel;
						rdfs:label ?label .
					FILTER regex( str(?label) , ?text , 'i' ) """;
			api:orderBy "?label";
	] ;
	.

spec:listCruises # not working
	a api:ListEndpoint;
	api:uriTemplate "/cruises";
	api:exampleRequestPath "/cruises";
	api:selector [
		api:filter "type=cruise";
		api:sort "label";
	];
	.

spec:listOrganizations
	a api:ListEndpoint;
	api:uriTemplate "/organizations";
	api:exampleRequestPath "/organizations";
	api:selector [
		api:filter "type=organization";
		api:sort "label";
	];
	.

spec:listPeople
	a api:ListEndpoint;
	api:uriTemplate "/people";
	api:exampleRequestPath "/people";
	api:selector [
		api:filter "type=person";
		api:sort "label";
	];
	.

spec:listAwards
	a api:ListEndpoint;
	api:uriTemplate "/awards";
	api:exampleRequestPath "/awards";
	api:selector [
		api:filter "type=award";
		api:sort "label";
	];
	.

spec:listDevices
	a api:ListEndpoint;
	api:uriTemplate "/devices";
	api:exampleRequestPath "/devices";
	api:selector [
		api:filter "type=device";
		api:sort "label";
	];
	.

spec:listEvents
	a api:ListEndpoint;
	api:uriTemplate "/events";
	api:exampleRequestPath "/events";
	api:selector [
		api:filter "type=event";
		api:sort "label";
	];
	.

spec:listFilesets
	a api:ListEndpoint;
	api:uriTemplate "/filesets";
	api:exampleRequestPath "/filesets";
	api:selector [
		api:filter "type=fileset";
		api:sort "label";
	];
	.

spec:listFormats
	a api:ListEndpoint;
	api:uriTemplate "/formats";
	api:exampleRequestPath "/formats";
	api:selector [
		api:filter "type=format";
		api:sort "label";
	];
	.

spec:listHoldings
	a api:ListEndpoint;
	api:uriTemplate "/holdings";
	api:exampleRequestPath "/holdings";
	api:selector [
		api:filter "type=holding";
		api:sort "label";
	];
	.

spec:listModels
	a api:ListEndpoint;
	api:uriTemplate "/models";
	api:exampleRequestPath "/models";
	api:selector [
		api:filter "type=model";
		api:sort "label";
	];
	.

spec:listParticipants
	a api:ListEndpoint;
	api:uriTemplate "/participants";
	api:exampleRequestPath "/participants";
	api:selector [
		api:filter "type=participant";
		api:sort "label";
	];
	.

spec:listPorts
	a api:ListEndpoint;
	api:uriTemplate "/ports";
	api:exampleRequestPath "/ports";
	api:selector [
		api:filter "type=port";
		api:sort "label";
	];
	.

spec:listProducts
	a api:ListEndpoint;
	api:uriTemplate "/products";
	api:exampleRequestPath "/products";
	api:selector [
		api:filter "type=product";
		api:sort "label";
	];
	.

spec:listReports
	a api:ListEndpoint;
	api:uriTemplate "/reports";
	api:exampleRequestPath "/reports";
	api:selector [
		api:filter "type=report";
		api:sort "label";
	];
	.

spec:listRepositories
	a api:ListEndpoint;
	api:uriTemplate "/repositories";
	api:exampleRequestPath "/repositories";
	api:selector [
		api:filter "type=repository";
		api:sort "label";
	];
	.

# properties definitions with labels

olvessel:Vessel
	a rdfs:Class;
	api:label "vessel";
	.

olcruise:Cruise
	a rdfs:Class;
	api:label "cruise";
	.

foaf:Organization
	a rdfs:Class;
	api:label "organization";
	.

foaf:Person
	a rdfs:Class;
	api:label "person";
	.

r2r:Award
	a rdfs:Class;
	api:label "award";
	.

r2r:Device
	a rdfs:Class;
	api:label "device";
	.

r2r:Event
	a rdfs:Class;
	api:label "event";
	.

r2r:Fileset
	a rdfs:Class;
	api:label "fileset";
	.

r2r:Format
	a rdfs:Class;
	api:label "format";
	.

r2r:Holding
	a rdfs:Class;
	api:label "holding";
	.

r2r:Model
	a rdfs:Class;
	api:label "model";
	.

r2r:Participant
	a rdfs:Class;
	api:label "participant";
	.

r2r:Port
	a rdfs:Class;
	api:label "port";
	.

r2r:Product
	a rdfs:Class;
	api:label "product";
	.

r2r:Report
	a rdfs:Class;
	api:label "report";
	.

r2r:Repository
	a rdfs:Class;
	api:label "repository";
	.

r2r:Operator
	a rdf:Property;
	api:label "operator";
	.

r2r:Owner
	a rdf:Property;
	api:label "owner";
	.

rdf:type
	a rdf:Property;
	api:label "type";
	.

rdfs:label
	a rdf:Property;
	api:label "label";
	.

skos:prefLabel
	a rdf:Property;
	api:label "prefLabel";
	.

skos:altLabel
	a rdf:Property;
	api:label "altLabel";
	.

skos:narrower
	a rdf:Property;
	api:label "narrower";
	.

skos:narrowerTransitive
	a rdf:Property;
	api:label "narrowerTransitive";
	.

skos:narrowMatch
	a rdf:Property;
	api:label "narrowMatch";
	.

skos:broader
	a rdf:Property;
	api:label "broader";
	.

skos:broaderTransitive
	a rdf:Property;
	api:label "broaderTransitive";
	.

skos:broadMatch
	a rdf:Property;
	api:label "broadMatch";
	.

skos:related
	a rdf:Property;
	api:label "related";
	.

skos:relatedMatch
	a rdf:Property;
	api:label "relatedMatch";
	.

skos:closeMatch
	a rdf:Property;
	api:label "closeMatch";
	.

skos:exactMatch
	a rdf:Property;
	api:label "exactMatch";
	.

skos:inScheme
	a rdf:Property;
	api:label "inScheme";
	.

skos:definition
	a rdf:Property;
	api:label "definition";
	.
	
skos:notation
	a rdf:Property;
	api:label "notation";
	.

dct:subject
	a rdf:Property;
	api:label "subject";
	.
